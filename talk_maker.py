#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
talk_maker.py ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ-—Ä–µ—á–∏ —á–µ—Ä–µ–∑ D-ID API.

–ß—Ç–æ –Ω–æ–≤–æ–≥–æ vs –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏:
- –ö–ª—é—á –±–µ—Ä—ë–º –°–ù–ê–ß–ê–õ–ê –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render): DID_API_KEY="USER:PASS"
  –∏–ª–∏ –ø–∞—Ä–∞ DID_API_USERNAME / DID_API_PASSWORD. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –ø—ã—Ç–∞–µ–º—Å—è
  –Ω–∞–π—Ç–∏ .env —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª 'apikey'.
- –ï—Å–ª–∏ –∑–∞–¥–∞–Ω DID_SOURCE_URL=https://.../avatar.png, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
  (–±–µ–∑ upload –Ω–∞ /images). –ò–Ω–∞—á–µ ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π avatar.png –Ω–∞ /images.
- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è make_talk_video(text, image="avatar.png", out=..., voice=..., stitch=True)
  ‚Äî –µ—ë —É–¥–æ–±–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ Telegram-–±–æ—Ç–∞.
- –û—Å—Ç–∞–≤–ª–µ–Ω CLI-—Ä–µ–∂–∏–º: python talk_maker.py -t "–ü—Ä–∏–≤–µ—Ç!"

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:
  POST https://api.d-id.com/images
  GET  https://api.d-id.com/tts/voices
  POST https://api.d-id.com/talks
  GET  https://api.d-id.com/talks/{id}
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: Basic (base64(user:pass)).
"""

import os
import sys
import time
import json
import base64
import pathlib
import argparse
from typing import Optional, List

# --- optional dotenv (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ .env). –ù–∞ Render –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.
try:
    from dotenv import load_dotenv  # type: ignore
except Exception:  # –µ—Å–ª–∏ –º–æ–¥—É–ª—è –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º .env
    load_dotenv = None  # type: ignore

# HTTP-–∫–ª–∏–µ–Ω—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º requests –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
try:
    import requests  # type: ignore
except Exception as e:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å 'requests'. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'requests' –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ requirements.txt", file=sys.stderr)
    raise

DID_BASE = "https://api.d-id.com"
DEFAULT_IMAGE_URL = "https://create-images-results.d-id.com/DefaultPresenters/Emma_f/image.jpeg"

# ----------------------- helpers: logging -----------------------

def log(msg: str, *, flush=True):
    print(msg, flush=flush)

def err(msg: str):
    print(msg, file=sys.stderr, flush=True)

# ----------------------- .env –∑–∞–≥—Ä—É–∑–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞) -----------------------

ENV_NAMES = [".env", ".env.local", ".env.i", ".env.txt", ".env.sample"]

def _debug_listdir(dirpath: pathlib.Path):
    try:
        names = [p.name for p in dirpath.iterdir()]
        log("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º: " + ", ".join(sorted(names)))
    except Exception as e:
        err(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å —Ñ–∞–π–ª—ã –≤ {dirpath}: {e}")

def _find_env_candidates(script_dir: pathlib.Path) -> List[pathlib.Path]:
    """–ò—â–µ–º —Ñ–∞–π–ª—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ .env, –∏–º–µ–Ω–Ω–æ –≤ –≠–¢–û–ô –ø–∞–ø–∫–µ (–±–µ–∑ –ø–æ–¥—ä—ë–º–∞ –Ω–∞–≤–µ—Ä—Ö)."""
    candidates = []
    for p in script_dir.iterdir():
        if not p.is_file():
            continue
        name = p.name.strip().replace("\u00A0", "")  # —É–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–±–µ–ª—ã
        if name in ENV_NAMES or name.startswith(".env"):
            candidates.append(p)
    return candidates

def _sanitize_line(raw: str) -> str:
    """–û–±—Ä–µ–∑–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–±–µ–ª—ã."""
    raw = (raw or "").strip().strip('"').strip("'")
    if "#" in raw:
        raw = raw.split("#", 1)[0].strip()
    return raw.replace("\u00A0", "")

def _read_key_from_apikey_file(script_dir: pathlib.Path) -> Optional[str]:
    """–§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª 'apikey', —á–∏—Ç–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏."""
    apikey_path = script_dir / "apikey"
    if not apikey_path.exists():
        return None
    try:
        with open(apikey_path, "r", encoding="utf-8") as f:
            line = f.readline()
        key = _sanitize_line(line)
        return key or None
    except Exception as e:
        err(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å 'apikey': {e}")
        return None

# ----------------------- –ö–ª—é—á–∏ (Render ENV ‚Üí .env —Ä—è–¥–æ–º ‚Üí apikey) -----------------------

def get_key_from_env_first() -> Optional[str]:
    """–°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º –∏–∑ –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø (Render), –±–µ–∑ .env."""
    key = _sanitize_line(os.getenv("DID_API_KEY", ""))
    if key:
        return key
    user = _sanitize_line(os.getenv("DID_API_USERNAME", ""))
    pwd  = _sanitize_line(os.getenv("DID_API_PASSWORD", ""))
    if user and pwd:
        return f"{user}:{pwd}"
    return None

def load_env_local_and_get_key() -> Optional[str]:
    """–ì—Ä—É–∑–∏–º .env –∏–∑ –ø–∞–ø–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞, –∏–Ω–∞—á–µ —á–∏—Ç–∞–µ–º 'apikey'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π –∫–ª—é—á –∏–ª–∏ None."""
    script_dir = pathlib.Path(__file__).resolve().parent
    log("üöÄ –°—Ç–∞—Ä—Ç talk_maker")
    log(f"üîé –ò—â—É .env –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
    _debug_listdir(script_dir)

    env_candidates = _find_env_candidates(script_dir)
    if env_candidates and load_dotenv:
        env_path = sorted(env_candidates)[0]
        log(f"üß© –ù–∞—à—ë–ª env-—Ñ–∞–π–ª: {env_path.name}")
        load_dotenv(dotenv_path=str(env_path), override=True)
        key = _sanitize_line(os.getenv("DID_API_KEY", ""))
        if not key:
            user = _sanitize_line(os.getenv("DID_API_USERNAME", ""))
            pwd  = _sanitize_line(os.getenv("DID_API_PASSWORD", ""))
            if user and pwd:
                key = f"{user}:{pwd}"
        if key:
            log(f"üîê –ö–ª—é—á –≤–∑—è—Ç –∏–∑ {env_path.name} (–¥–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤).")
            return key
        else:
            err("‚ö†Ô∏è  Env-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DID_API_KEY –∏–ª–∏ DID_API_USERNAME/DID_API_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    else:
        if env_candidates and not load_dotenv:
            err("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω .env, –Ω–æ –º–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É .env.")
        else:
            err("‚ÑπÔ∏è  Env-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞.")

    key_from_file = _read_key_from_apikey_file(script_dir)
    if key_from_file:
        log(f"üóùÔ∏è  –ö–ª—é—á –≤–∑—è—Ç –∏–∑ —Ñ–∞–π–ª–∞ 'apikey' (–¥–ª–∏–Ω–∞: {len(key_from_file)}).")
        return key_from_file

    return None

def get_api_key_strict() -> str:
    # 1) Render/—Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    key = get_key_from_env_first()
    if key:
        return key
    # 2) –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
    key = load_env_local_and_get_key()
    if key:
        return key
    # 3) –û—à–∏–±–∫–∞
    sys.exit(
        "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á D-ID.\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
        "  ‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: DID_API_KEY=USER:PASS\n"
        "    –∏–ª–∏ DID_API_USERNAME=USER –∏ DID_API_PASSWORD=PASS\n"
        "  ‚Ä¢ –ò–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ .env —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º (—Å–º. README) / —Ñ–∞–π–ª 'apikey' —Å –∫–ª—é—á–æ–º."
    )

# ----------------------- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ -----------------------

def _basic_from_userpass(raw_key: str) -> str:
    """
    –ï—Å–ª–∏ –∫–ª—é—á 'user:pass' ‚Äî –∫–æ–¥–∏—Ä—É–µ–º –≤ base64 (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π HTTP Basic).
    –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ base64 ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ –µ—Å—Ç—å.
    """
    if ":" in raw_key:
        token = base64.b64encode(raw_key.encode("utf-8")).decode("ascii")
        return f"Basic {token}"
    # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–æ–∂–∏–ª —É–∂–µ base64-—Å—Ç—Ä–æ–∫—É
    return f"Basic {raw_key}"

def headers_json(raw_key: str) -> dict:
    return {
        "Authorization": _basic_from_userpass(raw_key),
        "Accept": "application/json",
        "Content-Type": "application/json",
    }

def headers_multipart(raw_key: str) -> dict:
    return {
        "Authorization": _basic_from_userpass(raw_key),
        "Accept": "application/json",
    }

# ----------------------- –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ -----------------------

def read_text(args) -> str:
    # 1) CLI –∞—Ä–≥—É–º–µ–Ω—Ç -t/--text
    if getattr(args, "text", None):
        text = args.text.strip()
        if text:
            log(f"üìù –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (-t), –¥–ª–∏–Ω–∞: {len(text)}")
            return text

    # 2) –§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º
    if getattr(args, "text_file", None):
        p = pathlib.Path(args.text_file)
        if not p.exists():
            sys.exit(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {p}")
        text = p.read_text(encoding="utf-8").strip()
        if not text:
            sys.exit("‚ùå –§–∞–π–ª –ø—É—Å—Ç.")
        log(f"üìù –¢–µ–∫—Å—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞ ({p}), –¥–ª–∏–Ω–∞: {len(text)}")
        return text

    # 3) –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    log("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º). –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–æ–Ω–µ—Ü –≤–≤–æ–¥–∞.")
    lines = []
    while True:
        try:
            line = input()
        except EOFError:
            break
        if line == "":
            break
        lines.append(line)
    text = "\n".join(lines).strip()
    if not text:
        sys.exit("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ ‚Äî –Ω–µ—á–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞—Ç—å.")
    log(f"üìù –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ stdin, –¥–ª–∏–Ω–∞: {len(text)}")
    return text

# ----------------------- –†–∞–±–æ—Ç–∞ —Å D-ID -----------------------

def upload_image_if_exists(raw_key: str, local_path: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTPS-URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è source_url:
    1) –ï—Å–ª–∏ –∑–∞–¥–∞–Ω DID_SOURCE_URL ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é.
    2) –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ /images –∏ –±–µ—Ä—ë–º –∏—Ö —Å—Å—ã–ª–∫—É.
    3) –ò–Ω–∞—á–µ ‚Äî DEFAULT_IMAGE_URL.
    """
    env_src = _sanitize_line(os.getenv("DID_SOURCE_URL", ""))
    if env_src.lower().startswith("http"):
        log("üåê –ò—Å–ø–æ–ª—å–∑—É—é DID_SOURCE_URL –¥–ª—è source_url.")
        return env_src

    p = pathlib.Path(local_path)
    if not p.exists():
        log(f"‚ÑπÔ∏è  '{local_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑—å–º—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_IMAGE_URL

    url = f"{DID_BASE}/images"
    mime = "image/png" if p.suffix.lower() == ".png" else "image/jpeg"
    with open(p, "rb") as f:
        files = {"image": (p.name, f, mime)}
        r = requests.post(url, headers=headers_multipart(raw_key), files=files, timeout=60)
    if r.status_code >= 300:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {r.status_code} {r.text}")
    data = r.json()
    img_url = data.get("url") or data.get("image_url") or data.get("result_url") or data.get("signedUrl")
    if not img_url:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {json.dumps(data, ensure_ascii=False)}")
    log("üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, URL –ø–æ–ª—É—á–µ–Ω.")
    return img_url

def pick_ru_voice(raw_key: str) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–æ—Å–∏—Ç—å /tts/voices –∏ –≤—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π.
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'ru-RU-DmitryNeural'.
    """
    fallback = "ru-RU-DmitryNeural"
    try:
        r = requests.get(f"{DID_BASE}/tts/voices", headers=headers_json(raw_key), timeout=30)
        if r.status_code < 300:
            payload = r.json()
            voices = payload.get("voices", payload) if isinstance(payload, dict) else payload
            candidates = []
            for v in voices or []:
                txt = json.dumps(v, ensure_ascii=False).lower()
                if "ru-" in txt or "ru_ru" in txt or '"language":"ru' in txt or '"locale":"ru' in txt:
                    vid = v.get("voice_id") or v.get("short_name") or v.get("name")
                    if vid:
                        candidates.append(vid)
            if candidates:
                log(f"üîä –ì–æ–ª–æ—Å: {candidates[0]}")
                return candidates[0]
            log("‚ÑπÔ∏è  –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é —Ñ–æ–ª–±—ç–∫.")
        else:
            err(f"‚ö†Ô∏è  /tts/voices {r.status_code}: {r.text[:200]}")
    except Exception as e:
        err(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å /tts/voices: {e}")
    log(f"üîä –ì–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {fallback}")
    return fallback

def create_talk(raw_key: str, image_url: str, text: str, voice_id: str, stitch: bool = True) -> str:
    url = f"{DID_BASE}/talks"
    payload = {
        "source_url": image_url,
        "script": {
            "type": "text",
            "input": text,
            "provider": {"type": "microsoft", "voice_id": voice_id}
        },
        "config": {
            "stitch": stitch
            # result_format –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é mp4
        }
    }
    r = requests.post(url, headers=headers_json(raw_key), data=json.dumps(payload), timeout=60)
    if r.status_code >= 300:
        # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        try:
            details = r.json()
        except Exception:
            details = r.text
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è talk: {r.status_code} {details}")
    data = r.json()
    talk_id = data.get("id")
    if not talk_id:
        raise RuntimeError(f"–ù–µ—Ç id –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ talk: {json.dumps(data, ensure_ascii=False)}")
    log(f"üé¨ –°–æ–∑–¥–∞–Ω talk: {talk_id}")
    return talk_id

def wait_and_download_result(raw_key: str, talk_id: str, out_path: str,
                             poll_sec: float = 2.0, max_wait_sec: int = 300) -> str:
    url = f"{DID_BASE}/talks/{talk_id}"
    waited = 0.0
    while waited <= max_wait_sec:
        r = requests.get(url, headers=headers_json(raw_key), timeout=30)
        if r.status_code >= 300:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {r.status_code} {r.text}")
        data = r.json()
        status = data.get("status")
        if status == "done":
            result_url = data.get("result_url")
            if not result_url:
                raise RuntimeError(f"status=done, –Ω–æ –Ω–µ—Ç result_url: {json.dumps(data, ensure_ascii=False)}")
            log(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –°–∫–∞—á–∏–≤–∞—é: {result_url}")
            vid = requests.get(result_url, timeout=180)
            if vid.status_code >= 300:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {vid.status_code} {vid.text[:200]}")
            with open(out_path, "wb") as f:
                f.write(vid.content)
            return out_path
        elif status in {"created", "started"}:
            log(f"‚è≥ –°—Ç–∞—Ç—É—Å: {status}. –ñ–¥—É {poll_sec} —Å–µ–∫...")
            time.sleep(poll_sec)
            waited += poll_sec
        else:
            raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{status}': {json.dumps(data, ensure_ascii=False)}")
    raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

# ----------------------- –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ -----------------------

def make_talk_video(text: str,
                    image: str = "avatar.png",
                    out: Optional[str] = None,
                    voice: Optional[str] = None,
                    stitch: bool = True,
                    raw_key: Optional[str] = None) -> str:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç —Ä–æ–ª–∏–∫ —Å –æ–∑–≤—É—á–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ mp4.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ Telegram-–±–æ—Ç–∞ (–∏–º–ø–æ—Ä—Ç–æ–º –º–æ–¥—É–ª—è) –∏–ª–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.
    """
    text = (text or "").strip()
    if not text:
        raise ValueError("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")

    raw_key = raw_key or get_api_key_strict()
    img_url = upload_image_if_exists(raw_key, image)
    voice_id = voice or pick_ru_voice(raw_key) or "ru-RU-DmitryNeural"
    talk_id = create_talk(raw_key, img_url, text, voice_id, stitch=stitch)

    out_file = out or ("".join(ch for ch in text[:40] if ch.isalnum() or ch in (" ", "_", "-")).strip().replace(" ", "_") or "talk") + ".mp4"
    out_path = str(pathlib.Path(out_file).absolute())
    saved = wait_and_download_result(raw_key, talk_id, out_path)
    log(f"\nüéâ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")
    return saved

# ----------------------- CLI -----------------------

def main():
    parser = argparse.ArgumentParser(description="D-ID talking head CLI")
    parser.add_argument("-t", "--text", help="–¢–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–±–µ–∑ stdin).")
    parser.add_argument("-T", "--text-file", help="–ü—É—Ç—å –∫ txt-—Ñ–∞–π–ª—É —Å —Ç–µ–∫—Å—Ç–æ–º.")
    parser.add_argument("-i", "--image", default="avatar.png", help="–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é avatar.png).")
    parser.add_argument("-o", "--out", help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ MP4 (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –ø–æ —Ç–µ–∫—Å—Ç—É).")
    parser.add_argument("-v", "--voice", default=None, help="voice_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru-RU-DmitryNeural).")
    parser.add_argument("--no-stitch", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å stitch –≤ config.")
    args = parser.parse_args()

    raw_key = get_api_key_strict()
    text = read_text(args)

    img_url = upload_image_if_exists(raw_key, args.image)
    voice_id = args.voice or pick_ru_voice(raw_key) or "ru-RU-DmitryNeural"
    stitch = not args.no_stitch

    talk_id = create_talk(raw_key, img_url, text, voice_id, stitch=stitch)

    out_file = args.out or ("".join(ch for ch in text[:40] if ch.isalnum() or ch in (" ", "_", "-")).strip().replace(" ", "_") or "talk") + ".mp4"
    out_path = str(pathlib.Path(out_file).absolute())
    saved = wait_and_download_result(raw_key, talk_id, out_path)
    log(f"\nüéâ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        import traceback
        err("üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:")
        traceback.print_exc()
        sys.exit(1)
