#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
talk_maker.py ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ-—Ä–µ—á–∏ —á–µ—Ä–µ–∑ D-ID API.

–û—Ç–ª–∏—á–∏—è:
- –ö–ª—é—á –±–µ—Ä—ë–º —Å–Ω–∞—á–∞–ª–∞ –∏–∑ ENV (Render): DID_API_KEY="USER:PASS" –∏–ª–∏ –ø–∞—Ä–∞ DID_API_USERNAME / DID_API_PASSWORD.
- –ï—Å–ª–∏ –∑–∞–¥–∞–Ω DID_SOURCE_URL=https://.../avatar.png ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é; –∏–Ω–∞—á–µ –∑–∞–≥—Ä—É–∑–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ /images.
- –ì–æ–ª–æ—Å + –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ –∏–∑ /tts/voices (–∏–ª–∏ –∑–∞–¥–∞—é—Ç—Å—è ENV: DID_TTS_PROVIDER / DID_TTS_VOICE).
- –§–æ–ª–±—ç–∫-–≥–æ–ª–æ—Å: ru-RU-DmitryNeural (microsoft).

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã D-ID:
  POST https://api.d-id.com/images
  GET  https://api.d-id.com/tts/voices
  POST https://api.d-id.com/talks
  GET  https://api.d-id.com/talks/{id}

–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: Basic base64(user:pass)
"""

import os
import sys
import time
import json
import base64
import pathlib
import argparse
from typing import Optional, List, Tuple, Dict, Any

# optional dotenv (–ª–æ–∫–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ)
try:
    from dotenv import load_dotenv  # type: ignore
except Exception:
    load_dotenv = None  # type: ignore

# HTTP ‚Äî –∫–∞–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏
import requests

DID_BASE = "https://api.d-id.com"
DEFAULT_IMAGE_URL = "https://create-images-results.d-id.com/DefaultPresenters/Emma_f/image.jpeg"

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ (—Ä—É—Å—Å–∫–∏–π Microsoft TTS)
RU_MS_FALLBACK_VOICE = "ru-RU-DmitryNeural"
RU_MS_FALLBACK_PROVIDER = "microsoft"

# ----------------------- helpers -----------------------

def log(msg: str, *, flush=True):
    print(msg, flush=flush)

def err(msg: str):
    print(msg, file=sys.stderr, flush=True)

def _sanitize_line(raw: str) -> str:
    raw = (raw or "").strip().strip('"').strip("'")
    if "#" in raw:
        raw = raw.split("#", 1)[0].strip()
    return raw.replace("\u00A0", "")

def _abs(p: str) -> str:
    return str(pathlib.Path(p).absolute())

# ----------------------- –∫–ª—é—á–∏ (ENV ‚Üí .env ‚Üí apikey) -----------------------

def _read_key_from_env() -> Optional[str]:
    key = _sanitize_line(os.getenv("DID_API_KEY", ""))
    if key:
        return key
    user = _sanitize_line(os.getenv("DID_API_USERNAME", ""))
    pwd  = _sanitize_line(os.getenv("DID_API_PASSWORD", ""))
    if user and pwd:
        return f"{user}:{pwd}"
    return None

def _load_env_local() -> None:
    if load_dotenv:
        here = pathlib.Path(__file__).resolve().parent
        env_path = here / ".env"
        if env_path.exists():
            load_dotenv(dotenv_path=str(env_path), override=True)

def _read_key_from_apikey_file() -> Optional[str]:
    here = pathlib.Path(__file__).resolve().parent
    apikey_path = here / "apikey"
    if not apikey_path.exists():
        return None
    try:
        with open(apikey_path, "r", encoding="utf-8") as f:
            return _sanitize_line(f.readline())
    except Exception:
        return None

def get_api_key_strict() -> str:
    key = _read_key_from_env()
    if not key:
        _load_env_local()
        key = _read_key_from_env() or _read_key_from_apikey_file()
    if not key:
        sys.exit(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á D-ID. –ó–∞–¥–∞–π—Ç–µ DID_API_KEY=USER:PASS (–∏–ª–∏ DID_API_USERNAME / DID_API_PASSWORD)."
        )
    return key

# ----------------------- –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è -----------------------

def _basic_header_value(raw_key: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'user:pass' ‚Üí 'Basic base64(user:pass)'.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —É–∂–µ base64 ‚Äî —Ç–æ–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–º (–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –¥–∞–≤–∞—Ç—å user:pass).
    """
    if ":" in raw_key:
        token = base64.b64encode(raw_key.encode("utf-8")).decode("ascii")
        return f"Basic {token}"
    # –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ base64:
    return f"Basic {raw_key}"

def headers_json(raw_key: str) -> dict:
    return {
        "Authorization": _basic_header_value(raw_key),
        "Accept": "application/json",
        "Content-Type": "application/json",
    }

def headers_multipart(raw_key: str) -> dict:
    return {
        "Authorization": _basic_header_value(raw_key),
        "Accept": "application/json",
    }

# ----------------------- –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (source_url) -----------------------

def upload_image_if_exists(raw_key: str, local_path: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTPS-URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è source_url:
    1) –ï—Å–ª–∏ –∑–∞–¥–∞–Ω DID_SOURCE_URL ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é.
    2) –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ /images.
    3) –ò–Ω–∞—á–µ ‚Äî DEFAULT_IMAGE_URL.
    """
    env_src = _sanitize_line(os.getenv("DID_SOURCE_URL", ""))
    if env_src.lower().startswith("http"):
        log("üåê –ò—Å–ø–æ–ª—å–∑—É—é DID_SOURCE_URL –¥–ª—è source_url.")
        return env_src

    p = pathlib.Path(local_path)
    if not p.exists():
        log(f"‚ÑπÔ∏è  '{local_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑—å–º—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_IMAGE_URL

    url = f"{DID_BASE}/images"
    mime = "image/png" if p.suffix.lower() == ".png" else "image/jpeg"
    with open(p, "rb") as f:
        files = {"image": (p.name, f, mime)}
        r = requests.post(url, headers=headers_multipart(raw_key), files=files, timeout=60)
    if r.status_code >= 300:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {r.status_code} {r.text}")
    data = r.json()
    img_url = data.get("url") or data.get("image_url") or data.get("result_url") or data.get("signedUrl")
    if not img_url:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {json.dumps(data, ensure_ascii=False)}")
    log("üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, URL –ø–æ–ª—É—á–µ–Ω.")
    return img_url

# ----------------------- –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ -----------------------

def _extract_voice_fields(v: Dict[str, Any]) -> Tuple[Optional[str], Optional[str], str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (provider, voice_id, lang_text) –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –≥–æ–ª–æ—Å–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ.
    """
    provider = v.get("provider") or v.get("tts_provider") or v.get("source")
    voice_id = v.get("voice_id") or v.get("short_name") or v.get("name")
    lang = v.get("language") or v.get("locale") or ""
    # –Ω–æ—Ä–º–∏—Ä—É–µ–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ "ru"
    lang_text = f"{lang} {json.dumps(v, ensure_ascii=False)}".lower()
    return (str(provider).lower() if provider else None,
            str(voice_id) if voice_id else None,
            lang_text)

def pick_ru_voice_with_provider(raw_key: str) -> Tuple[str, str]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –∏ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–©–ï–ì–û –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ENV ‚Üí /tts/voices (microsoft, ru-*) ‚Üí —Ñ–æ–ª–±—ç–∫ (microsoft + ru-RU-DmitryNeural).
    """
    # 0) ENV override
    env_voice = _sanitize_line(os.getenv("DID_TTS_VOICE", ""))
    env_provider = _sanitize_line(os.getenv("DID_TTS_PROVIDER", ""))
    if env_voice:
        prov = env_provider if env_provider else RU_MS_FALLBACK_PROVIDER
        log(f"üîä –ì–æ–ª–æ—Å –∏–∑ ENV: {env_voice} (provider={prov})")
        return prov, env_voice

    # 1) /tts/voices
    try:
        r = requests.get(f"{DID_BASE}/tts/voices", headers=headers_json(raw_key), timeout=30)
        if r.status_code < 300:
            payload = r.json()
            voices = payload.get("voices", payload) if isinstance(payload, dict) else payload
            # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º microsoft + ru
            ms_ru: List[Tuple[str, str]] = []
            any_ru: List[Tuple[str, str]] = []
            for v in voices or []:
                provider, voice_id, lang_text = _extract_voice_fields(v)
                if not voice_id:
                    continue
                if "ru" in lang_text:
                    if provider == "microsoft":
                        ms_ru.append(("microsoft", voice_id))
                    else:
                        any_ru.append((provider or "", voice_id))
            if ms_ru:
                prov, vid = ms_ru[0]
                log(f"üîä –ì–æ–ª–æ—Å (microsoft, ru): {vid}")
                return prov, vid
            if any_ru:
                prov, vid = any_ru[0]
                log(f"üîä –ì–æ–ª–æ—Å (–ª—é–±–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, ru): {vid} (provider={prov})")
                return (prov or RU_MS_FALLBACK_PROVIDER, vid)
            # –µ—Å–ª–∏ —Ä—É—Å—Å–∫–∏—Ö –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—â–µ–º –ª—é–±–æ–π microsoft
            ms_any: List[Tuple[str, str]] = []
            for v in voices or []:
                provider, voice_id, lang_text = _extract_voice_fields(v)
                if voice_id and provider == "microsoft":
                    ms_any.append(("microsoft", voice_id))
            if ms_any:
                prov, vid = ms_any[0]
                log(f"üîä –ì–æ–ª–æ—Å (microsoft, –ª—é–±–æ–π): {vid}")
                return prov, vid
            log("‚ÑπÔ∏è  –í /tts/voices –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é —Ñ–æ–ª–±—ç–∫.")
        else:
            err(f"‚ö†Ô∏è  /tts/voices {r.status_code}: {r.text[:200]}")
    except Exception as e:
        err(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å /tts/voices: {e}")

    # 2) –§–æ–ª–±—ç–∫ ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π ms-–≥–æ–ª–æ—Å
    log(f"üîä –ì–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {RU_MS_FALLBACK_VOICE} (provider={RU_MS_FALLBACK_PROVIDER})")
    return RU_MS_FALLBACK_PROVIDER, RU_MS_FALLBACK_VOICE

# ----------------------- —Å–æ–∑–¥–∞–Ω–∏–µ talk -----------------------

def create_talk(raw_key: str, image_url: str, text: str,
                voice_id: str, provider: str, stitch: bool = True) -> str:
    url = f"{DID_BASE}/talks"
    payload = {
        "source_url": image_url,
        "script": {
            "type": "text",
            "input": text,
            "provider": {"type": provider, "voice_id": voice_id}
        },
        "config": {"stitch": stitch}
    }
    r = requests.post(url, headers=headers_json(raw_key), data=json.dumps(payload), timeout=60)
    if r.status_code >= 300:
        try:
            details = r.json()
        except Exception:
            details = r.text
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è talk: {r.status_code} {details}")
    data = r.json()
    talk_id = data.get("id")
    if not talk_id:
        raise RuntimeError(f"–ù–µ—Ç id –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ talk: {json.dumps(data, ensure_ascii=False)}")
    log(f"üé¨ –°–æ–∑–¥–∞–Ω talk: {talk_id}")
    return talk_id

def wait_and_download_result(raw_key: str, talk_id: str, out_path: str,
                             poll_sec: float = 2.0, max_wait_sec: int = 300) -> str:
    url = f"{DID_BASE}/talks/{talk_id}"
    waited = 0.0
    while waited <= max_wait_sec:
        r = requests.get(url, headers=headers_json(raw_key), timeout=30)
        if r.status_code >= 300:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {r.status_code} {r.text}")
        data = r.json()
        status = data.get("status")
        if status == "done":
            result_url = data.get("result_url")
            if not result_url:
                raise RuntimeError(f"status=done, –Ω–æ –Ω–µ—Ç result_url: {json.dumps(data, ensure_ascii=False)}")
            log(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –°–∫–∞—á–∏–≤–∞—é: {result_url}")
            vid = requests.get(result_url, timeout=180)
            if vid.status_code >= 300:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {vid.status_code} {vid.text[:200]}")
            with open(out_path, "wb") as f:
                f.write(vid.content)
            return out_path
        elif status in {"created", "started"}:
            log(f"‚è≥ –°—Ç–∞—Ç—É—Å: {status}. –ñ–¥—É {poll_sec} —Å–µ–∫...")
            time.sleep(poll_sec)
            waited += poll_sec
        else:
            raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{status}': {json.dumps(data, ensure_ascii=False)}")
    raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

# ----------------------- –ø—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----------------------

def make_talk_video(text: str,
                    image: str = "avatar.png",
                    out: Optional[str] = None,
                    voice: Optional[str] = None,
                    stitch: bool = True,
                    raw_key: Optional[str] = None) -> str:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç —Ä–æ–ª–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ mp4. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
    """
    text = (text or "").strip()
    if not text:
        raise ValueError("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏")

    raw_key = raw_key or get_api_key_strict()
    image_url = upload_image_if_exists(raw_key, image)

    # provider + voice (ENV ‚Üí /tts/voices ‚Üí —Ñ–æ–ª–±—ç–∫)
    if voice:
        # –µ—Å–ª–∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ voice ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑ ENV –∏–ª–∏ microsoft –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        provider = _sanitize_line(os.getenv("DID_TTS_PROVIDER", RU_MS_FALLBACK_PROVIDER))
        voice_id = voice
        log(f"üîä –ò—Å–ø–æ–ª—å–∑—É—é —è–≤–Ω—ã–π –≥–æ–ª–æ—Å: {voice_id} (provider={provider})")
    else:
        provider, voice_id = pick_ru_voice_with_provider(raw_key)

    talk_id = create_talk(raw_key, image_url, text, voice_id, provider, stitch=stitch)

    out_file = out or ("".join(ch for ch in text[:40] if ch.isalnum() or ch in (" ", "_", "-")).strip().replace(" ", "_") or "talk") + ".mp4"
    out_path = _abs(out_file)
    saved = wait_and_download_result(raw_key, talk_id, out_path)
    log(f"\nüéâ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")
    return saved

# ----------------------- CLI -----------------------

def main():
    parser = argparse.ArgumentParser(description="D-ID talking head CLI")
    parser.add_argument("-t", "--text", help="–¢–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–±–µ–∑ stdin).")
    parser.add_argument("-T", "--text-file", help="–ü—É—Ç—å –∫ txt-—Ñ–∞–π–ª—É —Å —Ç–µ–∫—Å—Ç–æ–º.")
    parser.add_argument("-i", "--image", default="avatar.png", help="–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é avatar.png).")
    parser.add_argument("-o", "--out", help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ MP4 (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –ø–æ —Ç–µ–∫—Å—Ç—É).")
    parser.add_argument("-v", "--voice", default=None, help="voice_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru-RU-DmitryNeural).")
    parser.add_argument("--no-stitch", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å stitch –≤ config.")
    args = parser.parse_args()

    raw_key = get_api_key_strict()
    # —á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
    txt = None
    if args.text:
        txt = args.text.strip()
    elif args.text_file:
        p = pathlib.Path(args.text_file)
        if not p.exists():
            sys.exit(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {p}")
        txt = p.read_text(encoding="utf-8").strip()
    else:
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–æ–Ω–µ—Ü):")
        lines = []
        while True:
            try:
                line = input()
            except EOFError:
                break
            if line == "":
                break
            lines.append(line)
        txt = "\n".join(lines).strip()
    if not txt:
        sys.exit("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")

    image_url = upload_image_if_exists(raw_key, args.image)
    provider, voice_id = pick_ru_voice_with_provider(raw_key) if not args.voice else (
        _sanitize_line(os.getenv("DID_TTS_PROVIDER", RU_MS_FALLBACK_PROVIDER)), args.voice
    )
    stitch = not args.no_stitch

    talk_id = create_talk(raw_key, image_url, txt, voice_id, provider, stitch=stitch)

    out_file = args.out or ("".join(ch for ch in txt[:40] if ch.isalnum() or ch in (" ", "_", "-")).strip().replace(" ", "_") or "talk") + ".mp4"
    out_path = _abs(out_file)
    saved = wait_and_download_result(raw_key, talk_id, out_path)
    log(f"\nüéâ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        import traceback
        err("üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:")
        traceback.print_exc()
        sys.exit(1)
